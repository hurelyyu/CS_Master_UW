Executive Summary for Applied Distributed Computing project#1 by Xinhe Wang

Assignment Overview:
The purpose of this project is for us to use socket programming to apply the TCP protocol and UDP protocol to accomplish client communicate with server to perform three basic operations, which are PUT(key,value), GET(key) and DELETE(key). Based on the request every time from client, server is able to response correctly. For each communication between server and client, their request, reply, and errors will be recorded in the server's log and client's log. This is a little bit similar as implement SQL commands and database will give out something, unless there are some databases are multi-threaded. Another example would be browsing a internet site. Server just gives the reply that corresponding to the certain request from client. Single threaded applications focus on handling requests sequentially. What this means is that when using a single-thread, only one task can be done at a time and the program waits until a task is finished before starting another one. While for single threaded, if the server does not respond, then the requests following need to wait for the "timeout" error appear for previous request and to be executed. Furthermore, the TCP protocol is guaranteed to deliver packets in order and compared with UDP it is much more reliable. When using UDP, packets are just sent to the recipient. The sender will not wait to make sure the recipient received the packet.

Technical impression:
Firstly, I created a public interface to make an abstraction of the hashmap and three functions for usage. And created a new class to do real implementation of this interface. Then, for building TCP socket program. For server, for every request I receive, first, I checked the format of request, if it is wrong, reply error and write this communication in the log. If the request is correct, then reply the message indicates the returned value or output. For TCP client side, it will send the request and get the output or error from the server side. Similar procedures in constructing UDP, while the order of package delivery is not guaranteed and we could not know if the request is arrived while save as TCP I still write a time out testing engine. 
For this project, I think the easy part is to use socket programming implement TCP and UDP protocols to perform the three basic operations required. And the hashmap used in these three implementations is stored in the server for saving key, value pairs, deleting or extracting value based on key. The difficult part for me is generating the log for both server and client. I have been considering whether I need to build a new class for updating clients and servers' logs or write it as a method inside of the TCP or UDP server and client's methods. Since different situation will have different message printings and different forms of logs. In addition, for every communication will have client and server to print out request and reply with current time tagged. It is hard for me to make those be consistent in how to accomplish.
